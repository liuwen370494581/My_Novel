package star.liuwen.com.novel_lw.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ruolan.letgo.bean.BookModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_MODEL".
*/
public class BookModelDao extends AbstractDao<BookModel, Long> {

    public static final String TABLENAME = "BOOK_MODEL";

    /**
     * Properties of entity BookModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BooKName = new Property(1, String.class, "booKName", false, "BOO_KNAME");
        public final static Property BookAuthor = new Property(2, String.class, "bookAuthor", false, "BOOK_AUTHOR");
        public final static Property BookUpdateTime = new Property(3, String.class, "bookUpdateTime", false, "BOOK_UPDATE_TIME");
        public final static Property BookUpdateContent = new Property(4, String.class, "bookUpdateContent", false, "BOOK_UPDATE_CONTENT");
        public final static Property BookPic = new Property(5, String.class, "bookPic", false, "BOOK_PIC");
        public final static Property BookReadTime = new Property(6, String.class, "bookReadTime", false, "BOOK_READ_TIME");
        public final static Property BookFreeRead = new Property(7, String.class, "bookFreeRead", false, "BOOK_FREE_READ");
    }


    public BookModelDao(DaoConfig config) {
        super(config);
    }
    
    public BookModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"BOO_KNAME\" TEXT," + // 1: booKName
                "\"BOOK_AUTHOR\" TEXT," + // 2: bookAuthor
                "\"BOOK_UPDATE_TIME\" TEXT," + // 3: bookUpdateTime
                "\"BOOK_UPDATE_CONTENT\" TEXT," + // 4: bookUpdateContent
                "\"BOOK_PIC\" TEXT," + // 5: bookPic
                "\"BOOK_READ_TIME\" TEXT," + // 6: bookReadTime
                "\"BOOK_FREE_READ\" TEXT);"); // 7: bookFreeRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String booKName = entity.getBooKName();
        if (booKName != null) {
            stmt.bindString(2, booKName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(3, bookAuthor);
        }
 
        String bookUpdateTime = entity.getBookUpdateTime();
        if (bookUpdateTime != null) {
            stmt.bindString(4, bookUpdateTime);
        }
 
        String bookUpdateContent = entity.getBookUpdateContent();
        if (bookUpdateContent != null) {
            stmt.bindString(5, bookUpdateContent);
        }
 
        String bookPic = entity.getBookPic();
        if (bookPic != null) {
            stmt.bindString(6, bookPic);
        }
 
        String bookReadTime = entity.getBookReadTime();
        if (bookReadTime != null) {
            stmt.bindString(7, bookReadTime);
        }
 
        String bookFreeRead = entity.getBookFreeRead();
        if (bookFreeRead != null) {
            stmt.bindString(8, bookFreeRead);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String booKName = entity.getBooKName();
        if (booKName != null) {
            stmt.bindString(2, booKName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(3, bookAuthor);
        }
 
        String bookUpdateTime = entity.getBookUpdateTime();
        if (bookUpdateTime != null) {
            stmt.bindString(4, bookUpdateTime);
        }
 
        String bookUpdateContent = entity.getBookUpdateContent();
        if (bookUpdateContent != null) {
            stmt.bindString(5, bookUpdateContent);
        }
 
        String bookPic = entity.getBookPic();
        if (bookPic != null) {
            stmt.bindString(6, bookPic);
        }
 
        String bookReadTime = entity.getBookReadTime();
        if (bookReadTime != null) {
            stmt.bindString(7, bookReadTime);
        }
 
        String bookFreeRead = entity.getBookFreeRead();
        if (bookFreeRead != null) {
            stmt.bindString(8, bookFreeRead);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BookModel readEntity(Cursor cursor, int offset) {
        BookModel entity = new BookModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // booKName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookAuthor
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookUpdateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookUpdateContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookPic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bookReadTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // bookFreeRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBooKName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookUpdateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookUpdateContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookPic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBookReadTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBookFreeRead(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
